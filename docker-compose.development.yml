version: "3.4"
services:
  openstad-mysql:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-openstad-no-db}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - AUTH_DB_NAME=${AUTH_DB_NAME}
      - API_DB_NAME=${API_DB_NAME}
      - IMAGE_DB_NAME=${IMAGE_DB_NAME}
    command:
      - mysqld
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    ports:
      - 3306:3306
    volumes:
      # - ./export.sql:/docker-entrypoint-initdb.d/99-export.sql
      - openstad-mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    entrypoint: |
      bash -c "
        echo ========== PASSWORD $$MYSQL_USER $$MYSQL_ROOT_PASSWORD $$MYSQL_PASSWORD
        echo \"CREATE DATABASE IF NOT EXISTS \\`$$AUTH_DB_NAME\\`; CREATE DATABASE IF NOT EXISTS \\`$$IMAGE_DB_NAME\\`; CREATE DATABASE IF NOT EXISTS \\`$$API_DB_NAME\\`; FLUSH PRIVILEGES; GRANT ALL ON *.* TO '$$MYSQL_USER'@'%'; FLUSH PRIVILEGES;\"
        echo \"CREATE DATABASE IF NOT EXISTS \\`$$AUTH_DB_NAME\\`; CREATE DATABASE IF NOT EXISTS \\`$$IMAGE_DB_NAME\\`; CREATE DATABASE IF NOT EXISTS \\`$$API_DB_NAME\\`; FLUSH PRIVILEGES; GRANT ALL ON *.* TO '$$MYSQL_USER'@'%'; FLUSH PRIVILEGES;\" > /docker-entrypoint-initdb.d/init.sql;
        /usr/local/bin/docker-entrypoint.sh $$0 $$@
      "
 
  openstad-mailhog:
    image: mailhog/mailhog
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui

  openstad-api-server:
    build:
      context: apps/api-server
      dockerfile: Dockerfile
    # TODO: dit moet conditional: alleen als we deze db gebruiken
    depends_on:
      openstad-mysql:
        condition: service_healthy
    container_name: openstad-api-server
    restart: unless-stopped
    environment:
      - URL=${API_URL}
      - HOSTNAME=${API_HOSTNAME}
      - DB_USERNAME=${API_DATABASE_USER}
      - DB_PASSWORD=${API_DATABASE_PASSWORD}
      - DB_NAME=${API_DATABASE_DATABASE}
      - DB_HOST=${API_DATABASE_HOST}
      - EMAILADDRESS=${API_EMAILADDRESS}
      - PORT=${API_PORT}
      - MAIL_FROM=${API_MAIL_FROM}
      - MAIL_TRANSPORT_SMTP_PORT=${API_MAIL_TRANSPORT_SMTP_PORT}
      - MAIL_TRANSPORT_SMTP_HOST=${API_MAIL_TRANSPORT_SMTP_HOST}
      - MAIL_TRANSPORT_SMTP_REQUIRESSL=${API_MAIL_TRANSPORT_SMTP_REQUIRESSL}
      - MAIL_TRANSPORT_SMTP_AUTH_USER=${API_MAIL_TRANSPORT_SMTP_AUTH_USER}
      - MAIL_TRANSPORT_SMTP_AUTH_PASS=${API_MAIL_TRANSPORT_SMTP_AUTH_PASS}
      - NOTIFICATIONS_ADMIN_EMAILADDRESS=${API_NOTIFICATIONS_ADMIN_EMAILADDRESS}
      - AUTH_JWTSECRET=${API_AUTH_JWTSECRET}
      - AUTH_FIXEDAUTHTOKENS=${API_AUTH_FIXEDAUTHTOKENS}
      - AUTH_ADAPTER_OPENSTAD_SERVERURL=${AUTH_APP_URL}
      - AUTH_ADAPTER_OPENSTAD_SERVERURL_INTERNAL=http://openstad-auth-server:${AUTH_PORT}
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./apps/api-server:/opt/api-server
      - openstad-api-server-node_modules:/opt/api-server/node_modules
      - openstad-api-server-init:/opt/api-server/init
    entrypoint: |
      bash -c "
        # todo: dit kan ook wel wat intelligenter...
        if [ ! -f "/opt/api-server/init/done" ]; then
          cd /opt/api-server
          npm run init-database && touch /opt/api-server/init/done;
        fi
        NODE_ENV=development nodemon server.js
      "

  openstad-auth-server:
    build:
      context: apps/auth-server
      dockerfile: Dockerfile
    # TODO: dit moet conditional: alleen als we deze db gebruiken
    depends_on:
      openstad-mysql:
        condition: service_healthy
    container_name: openstad-auth-server
    restart: unless-stopped
    environment:
      - APP_URL=${AUTH_APP_URL}
      - PORT=${AUTH_PORT}
      # - ADMIN_REDIRECT_URL=${AUTH_ADMIN_REDIRECT_URL}
      - DB_HOST=${AUTH_DB_HOST}
      - DB_USER=${AUTH_DB_USER}
      - DB_PASSWORD=${AUTH_DB_PASSWORD}
      - DB_NAME=${AUTH_DB_NAME}
      - MAIL_SERVER_URL=${AUTH_MAIL_SERVER_URL}
      - MAIL_SERVER_PORT=${AUTH_MAIL_SERVER_PORT}
      - MAIL_SERVER_SECURE=${AUTH_MAIL_SERVER_SECURE}
      - MAIL_SERVER_PASSWORD=${AUTH_MAIL_SERVER_PASSWORD}
      - MAIL_SERVER_USER_NAME=${AUTH_MAIL_SERVER_USER_NAME}
      - EMAIL_ASSETS_URL=${AUTH_EMAIL_ASSETS_URL}
      - FROM_NAME=${AUTH_FROM_NAME}
      - FROM_EMAIL=${AUTH_FROM_EMAIL}
      - AUTH_ADMIN_CLIENT_ID=${AUTH_ADMIN_CLIENT_ID}
      - AUTH_ADMIN_CLIENT_SECRET=${AUTH_ADMIN_CLIENT_SECRET}
      - AUTH_FIRST_CLIENT_ID=${AUTH_FIRST_CLIENT_ID}
      - AUTH_FIRST_CLIENT_SECRET=${AUTH_FIRST_CLIENT_SECRET}
      - AUTH_FIRST_LOGIN_CODE=${AUTH_FIRST_LOGIN_CODE}
      - SESSION_SECRET=${AUTH_SESSION_SECRET}
      - COOKIE_SECURE_OFF=${AUTH_COOKIE_SECURE_OFF}
      - API_URL=${API_URL}
      - ADMIN_URL=${ADMIN_URL}
      - ALLOWED_ADMIN_DOMAINS=["${ADMIN_DOMAIN}"]
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    volumes:
      - ./apps/auth-server:/opt/auth-server
      - openstad-auth-server-node_modules:/opt/auth-server/node_modules
      - openstad-auth-server-certs:/opt/auth-server/certs
      - openstad-auth-server-init:/opt/auth-server/init
    entrypoint: |
      bash -c "
        # todo: dit kan ook wel wat intelligenter...
        if [ ! -f "/opt/auth-server/init/done" ]; then
          # create certificates');
          cd /opt/auth-server/certs
          /usr/bin/openssl genrsa -out privatekey.pem 2048
          /usr/bin/openssl req -new -key privatekey.pem -out certrequest.csr -subj '/C=NL/ST=NA/L=NA/O=OpenStad/OU=OpenStad/CN=openstad.${AUTH_DOMAIN}'
          /usr/bin/openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem
          cd /opt/auth-server
          npm run init-database && touch /opt/auth-server/init/done;
        fi
        NODE_ENV=development nodemon server.js
      "

  openstad-image-server:
    build:
      context: apps/image-server
      dockerfile: Dockerfile
    # TODO: dit moet conditional: alleen als we deze db gebruiken
    depends_on:
      openstad-mysql:
        condition: service_healthy
    container_name: openstad-image-server
    restart: unless-stopped
    environment:
      - APP_URL=${IMAGE_APP_URL}
      - PORT_API=${IMAGE_PORT_API}
      - PORT_IMAGE_SERVER=${IMAGE_PORT_IMAGE_SERVER}
      - DB_HOST=${IMAGE_DB_HOST}
      - DB_USER=${IMAGE_DB_USER}
      - DB_PASSWORD=${IMAGE_DB_PASSWORD}
      - DB_NAME=${IMAGE_DB_NAME}
      - IMAGES_DIR=${IMAGE_IMAGES_DIR}
      - THROTTLE=${IMAGE_THROTTLE}
      - THROTTLE_CC_PROCESSORS=${IMAGE_THROTTLE_CC_PROCESSORS}
      - THROTTLE_CC_PREFETCHER=${IMAGE_THROTTLE_CC_PREFETCHER}
      - THROTTLE_CC_REQUESTS=${IMAGE_THROTTLE_CC_REQUESTS}
    ports:
      - "${IMAGE_PORT_API}:${IMAGE_PORT_API}"
    volumes:
      - ./apps/image-server:/opt/image-server
      - openstad-image-server-node_modules:/opt/image-server/node_modules
      - openstad-image-server-images:/opt/image-server/images
      - openstad-image-server-init:/opt/image-server/init
    entrypoint: |
      bash -c "
        # todo: dit kan ook wel wat intelligenter...
        if [ ! -f "/opt/image-server/init/done" ]; then
          cd /opt/image-server
          npm run init-database && touch /opt/image-server/init/done;
        fi
        NODE_ENV=development nodemon app.js
      "

  openstad-admin-server:
    build:
      context: apps/web
      dockerfile: Dockerfile
    container_name: openstad-admin-server
    restart: unless-stopped
    environment:
      - NEXTAUTH_URL=${ADMIN_URL}
      - NEXTAUTH_SECRET=${AUTH_ADMIN_CLIENT_SECRET}
      - CLIENT_ID=${AUTH_ADMIN_CLIENT_ID}
      - CLIENT_SECRET=${AUTH_ADMIN_CLIENT_SECRET}
      - OAUTH_URL=${AUTH_APP_URL}
      - OAUTH_URL_INTERNAL=http://openstad-auth-server:${AUTH_PORT}
      - API_URL=http://openstad-api-server:${API_PORT}
      - PORT=${ADMIN_PORT}
    ports:
      - "${ADMIN_PORT}:${ADMIN_PORT}"
    volumes:
      - ./apps/web:/opt/admin-server
      - openstad-admin-server-node_modules:/opt/admin-server/node_modules
      - openstad-admin-server-init:/opt/admin-server/init
    entrypoint: |
      bash -c "
        echo NEXTAUTH_URL $${NEXTAUTH_URL}
        echo NEXTAUTH_SECRET $${NEXTAUTH_SECRET}
        echo CLIENT_ID $${CLIENT_ID}
        echo CLIENT_SECRET $${CLIENT_SECRET}
        echo OAUTH_URL $${OAUTH_URL}
        echo OAUTH_URL_INTERNAL $${OAUTH_URL_INTERNAL}
        echo API_URL $${API_URL}
        echo PORT $${PORT}
        npm run dev
      "

volumes:
  openstad-mysql-data: {}
  openstad-api-server-node_modules: {}
  openstad-api-server-init: {}
  openstad-auth-server-node_modules: {}
  openstad-auth-server-certs: {}
  openstad-auth-server-init: {}
  openstad-image-server-node_modules: {}
  openstad-image-server-images: {}
  openstad-image-server-init: {}
  openstad-admin-server-node_modules: {}
  openstad-admin-server-init: {}
  
